name: Deploy Polkadot.js Apps on AWS

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version to deploy (e.g., v1.0.0)"
        required: true
      ws_rpc_url:
        description: "WebSocket RPC URL to use (e.g., wss://rpc.polkadot.io)"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Verify Release Exists
      run: |
        RELEASE_URL="https://github.com/${{ github.repository }}/releases/download/${{ inputs.release_version }}/polkadotjs-ui.tar.gz"
        echo "Checking release at: $RELEASE_URL"
        
        # Try to download with curl, following redirects and showing headers
        TEMP_FILE=$(mktemp)
        # Redirect progress to stderr and only capture the status code
        HTTP_CODE=$(curl -L -s -w "%{http_code}" -o "$TEMP_FILE" "$RELEASE_URL")
        CURL_EXIT=$?
        
        echo "Curl exit code: $CURL_EXIT"
        echo "HTTP status code: $HTTP_CODE"
        
        # Check file size if download succeeded
        if [ "$HTTP_CODE" = "200" ] && [ -f "$TEMP_FILE" ]; then
          FILE_SIZE=$(stat -f%z "$TEMP_FILE" 2>/dev/null || stat -c%s "$TEMP_FILE" 2>/dev/null)
          echo "Downloaded file size: $FILE_SIZE bytes"
          if [ "$FILE_SIZE" -gt 0 ]; then
            echo "‚úÖ Release artifact verified (${FILE_SIZE} bytes)"
            rm -f "$TEMP_FILE"
            exit 0
          else
            echo "‚ùå Downloaded file is empty"
          fi
        fi
        
        # If we got here, something went wrong
        echo "‚ùå Failed to verify release artifact"
        echo "Full curl output with headers:"
        curl -v -L "$RELEASE_URL"
        rm -f "$TEMP_FILE"
        exit 1

    - name: Create user data script
      run: |
        cat > user_data.sh << 'EOL'
        #!/bin/bash
        
        # Redirect stdout and stderr to a log file
        exec 1> >(logger -s -t $(basename $0)) 2>&1
        
        # Install AWS CLI
        apt-get update
        apt-get install -y awscli
        
        # Set the WS_RPC_URL environment variable
        export WS_RPC_URL="${ws_rpc_url}"
        
        # Download and run the setup script
        echo "Downloading setup script..."
        if ! curl -o /tmp/setup.sh https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/scripts/setup_polkadotjs.sh; then
          echo "Failed to download setup script"
          exit 1
        fi
        
        chmod +x /tmp/setup.sh
        echo "Running setup script..."
        if ! /tmp/setup.sh; then
          echo "Setup script failed"
          exit 1
        fi
        
        echo "Setup completed successfully"
        EOL
        
        # Replace the placeholder with actual WS_RPC_URL
        sed -i "s|\${ws_rpc_url}|${{ inputs.ws_rpc_url }}|g" user_data.sh

    - name: Create EC2 Instance
      id: create_ec2
      run: |
        # Create instance with all required tags
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ami-04b4f1a9cf54c11d0 \
          --instance-type t3.micro \
          --security-group-ids sg-0442d41440d018db1 \
          --key-name unforkable \
          --user-data file://user_data.sh \
          --tag-specifications "ResourceType=instance,Tags=[
            {Key=Name,Value=polkadotjs-${{ inputs.release_version }}},
            {Key=Project,Value=PolkadotJS},
            {Key=Version,Value=${{ inputs.release_version }}},
            {Key=Repository,Value=${{ github.repository }}}
          ]" \
          --query 'Instances[0].InstanceId' \
          --output text)
        
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

    - name: Wait for Instance
      run: |
        echo "Waiting for instance to be ready..."
        aws ec2 wait instance-status-ok \
          --instance-ids ${{ steps.create_ec2.outputs.instance_id }}

    - name: Get Instance IP
      id: get_ip
      run: |
        PUBLIC_IP=$(aws ec2 describe-instances \
          --instance-ids ${{ steps.create_ec2.outputs.instance_id }} \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

    - name: Check Application Health
      run: |
        echo "Checking application health..."
        MAX_RETRIES=30
        RETRY_INTERVAL=10
        for i in $(seq 1 $MAX_RETRIES); do
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ steps.get_ip.outputs.public_ip }})
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Application is healthy"
            break
          fi
          if [ "$i" = "$MAX_RETRIES" ]; then
            echo "‚ùå Application failed to start after $MAX_RETRIES attempts"
            # Get instance logs
            echo "Instance logs:"
            aws ec2 get-console-output --instance-id ${{ steps.create_ec2.outputs.instance_id }}
            exit 1
          fi
          echo "Waiting for application to start... (attempt $i/$MAX_RETRIES)"
          sleep $RETRY_INTERVAL
        done

    - name: Output Deployment Info
      run: |
        echo "üöÄ Deployment completed!"
        echo "Instance ID: ${{ steps.create_ec2.outputs.instance_id }}"
        echo "Public IP: ${{ steps.get_ip.outputs.public_ip }}"
        echo "Access the app at: http://${{ steps.get_ip.outputs.public_ip }}"
        echo "Using WS_RPC_URL: ${{ inputs.ws_rpc_url }}"
